/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        ListNode* p = l1; ListNode* q = l2;ListNode* ans = l1;
        if(l1->val > l2->val) {
            p = l2;
            q = l1;
            ans = l2;
        }
        ListNode* pp = p -> next;// ListNode* qq = q -> next;
        do{
            if(q -> val >= p -> val && (pp == NULL || q -> val < pp -> val)){
                p -> next = q;
                p = q;
                q = q -> next;
                p -> next = pp;
            }
            else{
                p = p -> next;
                pp = pp -> next;
            }
        }while(q != NULL && p != NULL);

        return ans;
    }

};


改进版：两个链表双移动
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        ListNode* p = l1; ListNode* q = l2;ListNode* ans = l1;
        if(l1->val > l2->val) {
            p = l2;
            q = l1;
            ans = l2;
        }
        ListNode* pp = p -> next; ListNode* qq = q ;ListNode* qq2 = q -> next;
        do{
            while(pp != NULL && pp -> val < q -> val){
                p = p -> next;
                pp = pp -> next;
            }
            if(pp == NULL) {
                p -> next =qq;
                return ans;
            }
            while(qq2 != NULL && qq -> val < pp -> val && qq2 -> val <= pp -> val ){
                qq = qq2;
                qq2 = qq2 -> next;
            }
            p -> next = q;
            p = pp;
            qq -> next = pp ;
            if(qq2 ==NULL) {
                qq -> next = pp;
                return ans;
            }
            q = qq2;
            qq = q;
            qq2 = qq -> next;
            pp = pp -> next;
            
        }while(q != NULL && p != NULL);

        return ans;
    }

};
